* covid-dashboard

Inspired by the excellent [[https://coronavirus.jhu.edu/map.html][COVID-19 Dashboard by the Center for Systems Science and Engineering (CSSE) at Johns Hopkins University]].

** Quick Start

#+begin_src sh
# local work
lein dev          # localhost:8280, hot-reload
lein garden auto  # styles + watcher

# release
lein prod         # output build -> resources/public/js/compiled/
#+end_src

** Dependencies

[[https://github.com/Day8/re-frame-template][Re-frame]] framework (which sits on [[https://github.com/reagent-project/reagent][Reagent]]) with [[https://github.com/noprompt/garden][garden]], [[https://github.com/Day8/re-com][re-com]], [[https://github.com/gadfly361/breaking-point][breaking-point]], [[https://github.com/clj-commons/secretary][secretary]], plus other niceties via [[https://github.com/Day8/re-frame-template][re-frame-template]]. [[https://github.com/d3/d3][D3]] visualizations.

** Layouts, Panels, Sub-panels, Switchers

There are three layouts: mobile, tablet, and desktop. The app is constrained to 100% viewport height for all layouts.

Each layout has one or more panels. Each panel contains one or more sub-panels, and a "switcher." The left/right buttons on the switcher switches through the sub-panels.

Each sub-panel contains a representation of data in the form of a table, line chart, or map. The sub-panel views are split among respective namespaces: ~tables~, ~line-charts~, and ~maps~.

*** Mobile

#+begin_src
+---+
|   |
| 1 |
|   |
+---+
#+end_src

The mobile layout has one panel (and one switcher). All the sub-panels are contained in that one panel.

*** Tablet

#+begin_src
+---+-----+---+
| 1 |     | 4 |
+---+     +---+
|   |  3  | 5 |
| 2 |     +---+
|   |     | 6 |
+---+-----+---+
#+end_src

The tablet layout has 6 panels, each with its own switcher. Panel 3 is "special," however, in that the main display element (which contains maps) spans the full viewport, while the switcher element fits in its expected place in the dom in the middle column.

Put another way, each panel has both a display element for the currently shown sub-panel and a switcher. Each panel's display element and switcher are colocatedâ€”except for panel 3. Panel 3 is split between a full viewport sub-panel display element in the "background" (behind all three columns), and its switcher, which lives in the middle column. Since these components are separate in the DOM and the component tree, they are synchronized via re-frame's events/app-db state. The other, "normal" panels' switchers use local ratom state.

*** Desktop

#+begin_src
+---+---------+---+---+
| 1 |         |   |   |
+---+         | 4 | 5 |
|   |    3    |   |   |
| 2 |         +---+---+
|   |         |   6   |
+---+---------+-------+
#+end_src

The main difference between tablet layout and desktop layout is that 4 & 5 are vertical instead of horizontal. Panel 3 is the same between tablet and desktop.

** Data

The backend slices and serves the data the way that each sub-panel wants it. One big endpoint delivers it together, originating from the ~init~ fetch event:

#+begin_src clojure
(defn init []
  (routes/app-routes)
  (re-frame/dispatch [:call-api-all]) ;; <-- here
  (re-frame/dispatch-sync [::events/initialize-db])
  ;; ...
#+end_src

The API call (via [[https://github.com/Day8/re-frame-http-fx][re-frame-http-fx]]) responses are divvied out in the re-frame event ~::assoc-api-all~:

 #+begin_src clojure
(assoc db :confirmed-by-province confirmed-by-province
       :confirmed-by-country confirmed-by-country
       :confirmed-by-us-county confirmed-by-us-county
       ;; ...
 #+end_src

...and then declared via [[https://github.com/weavejester/hiccup][hiccup]] in the view. Example:

#+begin_src clojure
[:table [:tbody
         (map (fn [[value us-county country]]
                [:tr {:key (str us-county value)}
                 [:td.bold value]
                 [:td (str us-county ", " country)]])
              @confirmed-by-us-county)]]
#+end_src
